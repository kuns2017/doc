---
title: "SQL 검증 가이드"
date: 2019-01-04 10:00:00 -0400
categories: Giude
---

1. AWR 수집시

--소요시간 2초 이상 OR  읽은 블럭 10,000블럭 이상 SQL 추출(SQL_ID 중복없이 추출)

SELECT
       A.EXECUTIONS_DELTA,
       ROUND(NVL(A.ROWS_PROCESSED_DELTA,0) /
          DECODE(A.EXECUTIONS_DELTA,0,1,A.EXECUTIONS_DELTA),0) AS AVG_ROWS_PROCESSED,
       ROUND(NVL(A.ELAPSED_TIME_DELTA,0)   /
          DECODE(A.EXECUTIONS_DELTA,0,1,A.EXECUTIONS_DELTA)/1000000,2) AS AVG_ELAPSED,
       ROUND(NVL(A.BUFFER_GETS_DELTA,0)    /
          DECODE(A.EXECUTIONS_DELTA,0,1,A.EXECUTIONS_DELTA),0)        AS AVG_BUFFER_GETS,
       A.MODULE,
       A.ACTION,
       A.SQL_ID,
       A.PARSING_SCHEMA_NAME         AS USERNAME,
       B.SQL_TEXT                    AS SQL_TEXT,
       TO_CHAR(C.BEGIN_INTERVAL_TIME,'YYYY.MM.DD HH24:MI:SS')  AS SQL_BEGIN_SNAP_TIME,
       TO_CHAR(C.END_INTERVAL_TIME,'YYYY.MM.DD HH24:MI:SS')    AS SQL_END_SNAP_TIME,
       A.INSTANCE_NUMBER             AS INST_NO,
       A.SNAP_ID,
       A.PLAN_HASH_VALUE,
       A.BUFFER_GETS_DELTA,
       A.VERSION_COUNT,
       A.OPTIMIZER_MODE,
       A.ELAPSED_TIME_DELTA,
       A.ROWS_PROCESSED_DELTA
  FROM DBA_HIST_SQLSTAT  A,
       DBA_HIST_SQLTEXT  B,
       DBA_HIST_SNAPSHOT C
 WHERE A.SQL_ID          = B.SQL_ID(+)
   AND A.DBID            = B.DBID(+)
   AND A.SNAP_ID         = C.SNAP_ID
   AND A.DBID            = C.DBID
   AND A.INSTANCE_NUMBER = C.INSTANCE_NUMBER
   AND C.BEGIN_INTERVAL_TIME BETWEEN TO_DATE('20100405090000','YYYYMMDDHH24MISS')
                                 AND TO_DATE('20100406235959','YYYYMMDDHH24MISS')
   AND (A.SNAP_ID,A.BUFFER_GETS_DELTA,A.EXECUTIONS_DELTA,A.ELAPSED_TIME_DELTA)
        = (SELECT MAX(A.SNAP_ID),
                  MAX(BUFFER_GETS_DELTA),
                  MAX(EXECUTIONS_DELTA),
                  MAX(ELAPSED_TIME_DELTA)
             FROM DBA_HIST_SQLSTAT
            WHERE A.DBID            = B.DBID
              AND A.INSTANCE_NUMBER = INSTANCE_NUMBER
              AND A.SQL_ID = SQL_ID)
   AND (A.ELAPSED_TIME_DELTA   >= 2000000 *
          DECODE(A.EXECUTIONS_DELTA, NULL, 1, 0, 1, A.EXECUTIONS_DELTA) OR   --- 소요 시간 2초
        A.BUFFER_GETS_DELTA    >=   10000 *
          DECODE(A.EXECUTIONS_DELTA, NULL, 1, 0, 1, A.EXECUTIONS_DELTA))     -- 읽은 블럭수 10000
   AND A.PARSING_SCHEMA_NAME  = '사용자'
 --  AND PARSING_SCHEMA_NAME NOT IN ('SYS','ORACLE')
  -- AND A.MODULE='JDBC Thin Client'

2. 실시간 SQL수집

WITH TMP_SQLSTAT_HIST AS(
SELECT SQL_ID, INST_ID
     , MAX(LAST_ACTIVE_TIME) SNAP_DATE
     , MAX(PARSING_SCHEMA_NAME) PARSING_SCHEMA_NAME
     , PLAN_HASH_VALUE
     , MAX(MODULE) MODULE
     , SUM(EXECUTIONS) EXECUTIONS
     , SUM(BUFFER_GETS) BUFFER_GETS
     , ROUND(SUM(BUFFER_GETS) / DECODE(SUM(EXECUTIONS), 0, 1,
                                       SUM(EXECUTIONS))) EXEC_BUFFER_GETS
     , SUM(DISK_READS) DISK_READS
     , ROUND(SUM(DISK_READS) / DECODE(SUM(EXECUTIONS), 0, 1,
                                      SUM(EXECUTIONS))) EXEC_DISK_READS
     , SUM(ROWS_PROCESSED) ROWS_PROCESSED
     , ROUND(SUM(ROWS_PROCESSED) / DECODE(SUM(EXECUTIONS), 0, 1,
                                          SUM(EXECUTIONS))) EXEC_ROWS
     , SUM(CPU_TIME) CPU_TIME
     , ROUND(SUM(CPU_TIME) / DECODE(SUM(EXECUTIONS), 0, 1,
                                    SUM(EXECUTIONS)) / 1000000, 6) EXEC_CPU_TIME
     , SUM(CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME
     , ROUND(SUM(CLUSTER_WAIT_TIME) / DECODE(SUM(EXECUTIONS), 0, 1,
                                             SUM(EXECUTIONS)) / 1000000, 6) EXEC_CLWAIT_TIME
     , SUM(ELAPSED_TIME) ELAPSED_TIME
     , ROUND(SUM(ELAPSED_TIME) / DECODE(SUM(EXECUTIONS), 0, 1,
                                        SUM(EXECUTIONS)) / 1000000, 6) EXEC_ELAPSED_TIME
  FROM GV$SQL B
 WHERE NVL(B.PARSING_SCHEMA_NAME,'-') NOT IN ('SYS','SYSMAN','DBSNMP','SYSTEM','EXFSYS')
   AND NOT REGEXP_LIKE(NVL(B.MODULE,'-'), 'Orange|SQL Developer|SQLGate|Data Pump|
                                           TOAD|golden|ERwin|PL.SQL Developer|
                                           SQL Loader|sqlplus|SQL.Plus|oracle|DBMS_SCHEDULER', 'i')
   AND PLAN_HASH_VALUE > 0
   AND MODULE IS NOT NULL
 GROUP BY SQL_ID, INST_ID, PLAN_HASH_VALUE
)
SELECT --같거나 비슷한 SQL은 같은 GROUP으로 표현
       DENSE_RANK() OVER(ORDER BY DBMS_LOB.SUBSTR(B.SQL_TEXT, 100, 1)) SQL_GRP_TYPE
     , A.INST_ID            --최종 수행된 INSTANCE
     , A.SNAP_DATE          --최종 수행 일자
     , A.SQL_ID             --SQL_ID
     , A.PLAN_HASH_VALUE    --실행 계획에 종속적인 값
     , A.MODULE             --실행 모듈
     , A.EXECUTIONS         --총 실행수
     , A.EXEC_ROWS          --실행당 결과 건수
     , A.EXEC_BUFFER_GETS   --실행당 BUFFER_GET
     , A.BUFFER_GETS        --총 BUFFER_GET
     , A.EXEC_DISK_READS    --실행당 DISK_READ
     , A.EXEC_ELAPSED_TIME  --실행당 수행 시간
     , A.EXEC_CPU_TIME      --실행당 CPU 시간
     , A.ELAPSED_TIME       --총 수행시간
     , A.CPU_TIME           --총 CPU 시간
     , A.CLUSTER_WAIT_TIME  --총 CLUSTER 대기 시간
     , ROUND(A.CPU_TIME / A.ELAPSED_TIME, 2) CPU_RATE -- 수행시간 대비 CPU 시간 비율
  FROM (
        SELECT SNAP_DATE, INST_ID, SQL_ID, PLAN_HASH_VALUE, MODULE
             , EXECUTIONS, EXEC_ROWS, EXEC_BUFFER_GETS, BUFFER_GETS, EXEC_DISK_READS
             , ELAPSED_TIME, CPU_TIME, CLUSTER_WAIT_TIME
             , EXEC_ELAPSED_TIME, EXEC_CPU_TIME
             , RANK() OVER(ORDER BY EXECUTIONS DESC) EXECUTIONS_RNK
             , RANK() OVER(ORDER BY BUFFER_GETS DESC) BUFFER_GETS_RNK
             , RANK() OVER(ORDER BY EXEC_CPU_TIME DESC) EXEC_CPU_TIME_RNK
             , RANK() OVER(ORDER BY EXEC_BUFFER_GETS DESC) EXEC_BUFFER_GETS_RNK
          FROM TMP_SQLSTAT_HIST
         WHERE NOT((CLUSTER_WAIT_TIME/DECODE(CPU_TIME, 0, 1, CPU_TIME) <= 0.95 OR
                    CPU_TIME/ELAPSED_TIME <= 0.9) AND
                   (
                    (EXECUTIONS >= 300000 AND EXEC_BUFFER_GETS <= 20) OR
                    (EXECUTIONS >= 100000 AND EXECUTIONS < 300000 AND EXEC_BUFFER_GETS <= 50) OR
                    (EXECUTIONS >= 50000 AND EXECUTIONS < 100000 AND EXEC_BUFFER_GETS <= 100) OR
                    (EXECUTIONS >= 10000 AND EXECUTIONS < 50000 AND EXEC_BUFFER_GETS <= 200) OR
                    (EXECUTIONS >= 5000 AND EXECUTIONS < 10000 AND EXEC_BUFFER_GETS <= 500)  OR
                    (EXECUTIONS >= 3000 AND EXECUTIONS < 5000 AND EXEC_BUFFER_GETS <= 1000) OR
                    (EXECUTIONS >= 1000 AND EXECUTIONS < 3000 AND EXEC_BUFFER_GETS <= 2000) OR
                    (EXECUTIONS >= 500 AND EXECUTIONS < 1000 AND EXEC_BUFFER_GETS <= 3000) OR
                    (EXECUTIONS >= 100 AND EXECUTIONS < 500 AND EXEC_BUFFER_GETS <= 5000) OR
                    (EXECUTIONS >= 10 AND EXECUTIONS < 100 AND EXEC_BUFFER_GETS <= 10000) OR
                    (EXECUTIONS >= 3 AND EXECUTIONS < 10 AND EXEC_BUFFER_GETS <= 30000) OR
                    (EXECUTIONS < 3 AND EXEC_BUFFER_GETS <= 100000)
                   )
                  ) --일간 실행수 대비 실행당 BUFFER_GETS가 크지 않은 경우 튜닝 대상 제외
                    --단 CPU_TIME 비율이 높으면 포함. 제외 기준은 변경 및 삭제가 자유로움
            AND NOT(EXEC_ELAPSED_TIME <= 0.0005) --실행당 ELASED_TIME이 0.0005초 미만 제외
            AND NOT(EXEC_ROWS*2 >= EXEC_BUFFER_GETS)--실행당 건수가 실행당 BUFFER_GET*2이상 제외
            ) A,
       GV$SQL B
 WHERE A.INST_ID = B.INST_ID
   AND A.SQL_ID = B.SQL_ID
   AND B.CHILD_NUMBER = 0
   AND (A.EXECUTIONS_RNK <= 30 OR                             --실행수 TOP 30
        A.BUFFER_GETS_RNK <= 30 OR                            --TOTAL BUFFER_GETS TOP 30
        A.EXEC_BUFFER_GETS_RNK <= 30 OR                       --실행당 BUFFER_GETS TOP 30
        (A.EXECUTIONS >= 100 AND A.EXEC_ELAPSED_TIME >= 10)); --실행수 100이상, 수행시간 10초 이상

3. SQL문 수집

 SELECT ROWNUM CNT,
        T1.*
   FROM (
          SELECT t1.parsing_schema_name,
                 t1.module, t1.sql_id, t1.hash_value, t1.substr_sqltext, t1.executions, t1.buffer_gets,
                 t1.disk_reads, t1.rows_processed, t1.lio, t1.elapsed_sec, t1.cpu_sec,
                 round(t1.cpu_time / t1.cpu_time_total*100,1) ratio_cpu,
                 round(t1.elapsed_time / elapsed_time_total*100,1) ratio_elapsed
          FROM (
                select parsing_schema_name, module, sql_id, hash_value, sql_fulltext, substr(sql_text, 1, 100) substr_sqltext,
                       executions, buffer_gets, disk_reads, rows_processed, elapsed_time, cpu_time,
                       round(buffer_gets/decode(executions, 0, 1, executions) , 1) lio,
                       round(elapsed_time/decode(executions, 0, 1, executions) / 1000000,1) elapsed_sec,
                       round(cpu_time/decode(executions,0,1,executions) / 1000000 ,1) cpu_sec,
                       sum(cpu_time) over() cpu_time_total,
                       sum(elapsed_time) over() elapsed_time_total
                from v$sqlarea
                ) t1
           WHERE t1.executions > 0
           and   t1.parsing_schema_name not in ('SYS','SYSTEM','SYSMAN')
           and   t1.module='JDBC Thin Client'
           order by ratio_cpu desc ---- CPU를 많이 사용한 SQL문 추출
                    elapsed_sec ---- 이것은 1회 수행당 응답 시간 기준으로 추출할때 사용
           ) t1
    WHERE ROWNUM <= 30


4.  FULL TABLE SCAN SQL문 찾기

  SELECT ROWNUM CNT,
         T1.*
   FROM (
          SELECT t1.parsing_schema_name,
                 t1.module, t1.sql_id, t1.hash_value, t1.substr_sqltext, t1.executions, t1.buffer_gets,
                 t1.disk_reads, t1.rows_processed, t1.lio_exec, t1.elapsed_sec, t1.cpu_sec,
                 round(t1.cpu_time / t1.cpu_time_total*100,1) ratio_cpu,
                 round(t1.elapsed_time / elapsed_time_total*100,1) ratio_elapsed
          FROM (
                select address, parsing_schema_name, module, sql_id, hash_value, sql_fulltext, substr(sql_text, 1, 100) substr_sqltext,
                       executions, buffer_gets, disk_reads, rows_processed, elapsed_time, cpu_time,
                       round(buffer_gets/decode(executions, 0, 1, executions) , 1) lio_exec,
                       round(elapsed_time/decode(executions, 0, 1, executions) / 1000000,1) elapsed_sec,
                       round(cpu_time/decode(executions,0,1,executions) / 1000000 ,1) cpu_sec,
                       sum(cpu_time) over() cpu_time_total,
                       sum(elapsed_time) over() elapsed_time_total
                from v$sqlarea
                ) t1,
                ( select distinct hash_value,
                         address
                  from v$sql_plan
                  where operation = 'TABLE ACCESS'
                  and   options = 'FULL'
                  and   OBJECT_OWNER in ('EACADM','PTPADM','EPRADM','FIADM')
                  ) x
           WHERE t1.executions > 0
           and   x.hash_value = t1.hash_value
           and   x.address = t1.address
           and   t1.parsing_schema_name not in ('SYS','SYSTEM','SYSMAN')
           and   t1.module in ('DBMS_SCHEDULER','JDBC Thin Client')
           order by lio_exec desc ---- CPU를 많이 사용한 SQL문 추출
                  --  elapsed_sec ---- 이것은 1회 수행당 응답 시간 기준으로 추출할때 사용
           ) t1
    WHERE ROWNUM <= 100
